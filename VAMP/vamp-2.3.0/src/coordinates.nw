% -*- ess-noweb-default-code-mode: f90-mode; noweb-default-code-mode: f90-mode; -*- 
% VAMP coordinates code as NOWEB source
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\RCSId$Id: coordinates.nw 314 2010-04-17 20:32:33Z ohl $
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Coordinates}
\label{sec:coordinates}
<<[[coordinates.f90]]>>=
! coordinates.f90 --
<<Copyleft notice>>
module coordinates
  use kinds
  use constants, only: PI
  use specfun, only: gamma
  implicit none
  private
  <<Declaration of [[coordinates]] procedures>>
contains
  <<Implementation of [[coordinates]] procedures>>
end module coordinates
@ %def coordinates
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Angular Spherical Coordinates}
\begin{equation}
\begin{aligned}
  x_n     &= r \cos\theta_{n-2} \\
  x_{n-1} &= r \sin\theta_{n-2}\cos\theta_{n-3} \\
          &\cdots \\
  x_3     &= r \sin\theta_{n-2}\sin\theta_{n-3} \cdots \cos\theta_1 \\
  x_2     &= r \sin\theta_{n-2}\sin\theta_{n-3} \cdots \sin\theta_1\cos\phi \\
  x_1     &= r \sin\theta_{n-2}\sin\theta_{n-3} \cdots \sin\theta_1\sin\phi
\end{aligned}
\end{equation}
and
\begin{equation}
  J = r^{n-1} \prod_{i=1}^{n-2}\left(\sin\theta_i\right)^i
\end{equation}
We can minimize the number of multiplications by computing the
products
\begin{equation}
  P_j = \prod_{i=j}^{n-2}\sin\theta_i
\end{equation}
Then
\begin{equation}
\begin{aligned}
  x_n     &= r \cos\theta_{n-2} \\
  x_{n-1} &= r P_{n-2}\cos\theta_{n-3} \\
          &\cdots \\
  x_3     &= r P_2 \cos\theta_1 \\
  x_2     &= r P_1 \cos\phi \\
  x_1     &= r P_1\sin\phi
\end{aligned}
\end{equation}
and
\begin{equation}
  J = r^{n-1} \prod_{i=1}^{n-2}P_i
\end{equation}
Note that~$\theta_i\in[0,\pi]$ and~$\phi\in[0,2\pi]$
or~$\phi\in[-\pi,\pi]$. Therefore~$\sin\theta_i\ge0$ and
\begin{equation}
\label{eq:sin(theta)}
  \sin\theta_i = \sqrt{1-\cos^2\theta_i}
\end{equation}
which is not true for~$\phi$.  Since [[sqrt]] is typically much faster
than [[sin]] and [[cos]], we use~(\ref{eq:sin(theta)}) where ever possible.
@ 
<<Declaration of [[coordinates]] procedures>>=
public :: spherical_to_cartesian_2, &
     spherical_to_cartesian, spherical_to_cartesian_j
@
<<Implementation of [[coordinates]] procedures>>=
pure subroutine spherical_to_cartesian_2 (r, phi, theta, x, jacobian)
  real(kind=default), intent(in) :: r, phi
  real(kind=default), dimension(:), intent(in) :: theta
  real(kind=default), dimension(:), intent(out), optional :: x
  real(kind=default), intent(out), optional :: jacobian
  real(kind=default), dimension(size(theta)) :: cos_theta
  real(kind=default), dimension(size(theta)+1) :: product_sin_theta
  integer :: n, i
  n = size (theta) + 2
  cos_theta = cos (theta)
  product_sin_theta(n-1) = 1.0_default
  do i = n - 2, 1, -1
     product_sin_theta(i) = &
          product_sin_theta(i+1) * sqrt (1 - cos_theta(i)**2)
  end do
  if (present (x)) then
     x(1) = r * product_sin_theta(1) * sin (phi)
     x(2) = r * product_sin_theta(1) * cos (phi)
     x(3:) = r * product_sin_theta(2:n-1) * cos_theta
  end if
  if (present (jacobian)) then
     jacobian = r**(n-1) * product (product_sin_theta)
  end if
end subroutine spherical_to_cartesian_2
@ %def spherical_to_cartesian_2
@ 
\begin{dubious}
  Note that~[[call]] inside of a function breaks [[F]]-compatibility.
  Here it would be easy to fix, but the inverse can not be coded as a
  function, unless a type for spherical coordinates is introduced,
  where [[theta]] could not be assumed shape \ldots
\end{dubious}
<<Implementation of [[coordinates]] procedures>>=
pure function spherical_to_cartesian (r, phi, theta) result (x)
  real(kind=default), intent(in) :: r, phi
  real(kind=default), dimension(:), intent(in) :: theta
  real(kind=default), dimension(size(theta)+2) :: x
  call spherical_to_cartesian_2 (r, phi, theta, x = x)
end function spherical_to_cartesian
@ %def spherical_to_cartesian
@ 
<<Implementation of [[coordinates]] procedures>>=
pure function spherical_to_cartesian_j (r, phi, theta) &
     result (jacobian)
  real(kind=default), intent(in) :: r, phi
  real(kind=default), dimension(:), intent(in) :: theta
  real(kind=default) :: jacobian
  call spherical_to_cartesian_2 (r, phi, theta, jacobian = jacobian)
end function spherical_to_cartesian_j
@ %def spherical_to_cartesian_j
@ 
<<Declaration of [[coordinates]] procedures>>=
public :: cartesian_to_spherical_2, &
     cartesian_to_spherical, cartesian_to_spherical_j
@ 
<<Implementation of [[coordinates]] procedures>>=
pure subroutine cartesian_to_spherical_2 (x, r, phi, theta, jacobian)
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default), intent(out), optional :: r, phi
  real(kind=default), dimension(:), intent(out), optional :: theta
  real(kind=default), intent(out), optional :: jacobian
  real(kind=default) :: local_r
  real(kind=default), dimension(size(x)-2) :: cos_theta
  real(kind=default), dimension(size(x)-1) :: product_sin_theta
  integer :: n, i
  n = size (x)
  local_r = sqrt (dot_product (x, x))
  if (local_r == 0) then
    if (present (r)) then
      r = 0
    end if 
    if (present (phi)) then
      phi = 0
    end if
    if (present (theta)) then
      theta = 0
    end if
    if (present (jacobian)) then
      jacobian = 1
    end if
  else     	
    product_sin_theta(n-1) = 1
    do i = n, 3, -1
       if (product_sin_theta(i-1) == 0) then
         cos_theta(i-2) = 0
       else	
         cos_theta(i-2) = x(i) / product_sin_theta(i-1) / local_r
       end if
       product_sin_theta(i-2) = &
            product_sin_theta(i-1) * sqrt (1 - cos_theta(i-2)**2)
    end do
    if (present (r)) then
       r = local_r
    end if
    if (present (phi)) then
       !  Set phi = 0 for vanishing vector
       if (x(1) == 0 .and. x(2)==0) then
    	phi = 0
       else	
          phi = atan2 (x(1), x(2))
       end if 
    end if
    if (present (theta)) then
       theta = acos (cos_theta)
    end if
    if (present (jacobian)) then
       jacobian = local_r**(1-n) / product (product_sin_theta)
    end if
  end if
end subroutine cartesian_to_spherical_2
@ %def cartesian_to_spherical_2
@ 
<<Implementation of [[coordinates]] procedures>>=
pure subroutine cartesian_to_spherical (x, r, phi, theta)
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default), intent(out) :: r, phi
  real(kind=default), dimension(:), intent(out) :: theta
  call cartesian_to_spherical_2 (x, r, phi, theta)
end subroutine cartesian_to_spherical
@ %def cartesian_to_spherical
@ 
<<Implementation of [[coordinates]] procedures>>=
pure function cartesian_to_spherical_j (x) result (jacobian)
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default) :: jacobian
  call cartesian_to_spherical_2 (x, jacobian = jacobian)
end function cartesian_to_spherical_j
@ %def cartesian_to_spherical_j
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Trigonometric Spherical Coordinates}
<<Declaration of [[coordinates]] procedures>>=
public :: spherical_cos_to_cartesian_2, &
     spherical_cos_to_cartesian, spherical_cos_to_cartesian_j
@ Using the cosine, we have to drop~$P_1$ from the Jacobian
<<Implementation of [[coordinates]] procedures>>=
pure subroutine spherical_cos_to_cartesian_2 (r, phi, cos_theta, x, jacobian)
  real(kind=default), intent(in) :: r, phi
  real(kind=default), dimension(:), intent(in) :: cos_theta
  real(kind=default), dimension(:), intent(out), optional :: x
  real(kind=default), intent(out), optional :: jacobian
  real(kind=default), dimension(size(cos_theta)+1) :: product_sin_theta
  integer :: n, i
  n = size (cos_theta) + 2
  product_sin_theta(n-1) = 1.0_default
  do i = n - 2, 1, -1
     product_sin_theta(i) = &
          product_sin_theta(i+1) * sqrt (1 - cos_theta(i)**2)
  end do
  if (present (x)) then
     x(1) = r * product_sin_theta(1) * sin (phi)
     x(2) = r * product_sin_theta(1) * cos (phi)
     x(3:) = r * product_sin_theta(2:n-1) * cos_theta
  end if
  if (present (jacobian)) then
     jacobian = r**(n-1) * product (product_sin_theta(2:))
  end if
end subroutine spherical_cos_to_cartesian_2
@ %def spherical_cos_to_cartesian_2
@ 
<<Implementation of [[coordinates]] procedures>>=
pure function spherical_cos_to_cartesian (r, phi, theta) result (x)
  real(kind=default), intent(in) :: r, phi
  real(kind=default), dimension(:), intent(in) :: theta
  real(kind=default), dimension(size(theta)+2) :: x
  call spherical_cos_to_cartesian_2 (r, phi, theta, x = x)
end function spherical_cos_to_cartesian
@ %def spherical_cos_to_cartesian
@ 
<<Implementation of [[coordinates]] procedures>>=
pure function spherical_cos_to_cartesian_j (r, phi, theta) &
     result (jacobian)
  real(kind=default), intent(in) :: r, phi
  real(kind=default), dimension(:), intent(in) :: theta
  real(kind=default) :: jacobian
  call spherical_cos_to_cartesian_2 (r, phi, theta, jacobian = jacobian)
end function spherical_cos_to_cartesian_j
@ %def spherical_cos_to_cartesian_j
@ 
<<Declaration of [[coordinates]] procedures>>=
public :: cartesian_to_spherical_cos_2, &
     cartesian_to_spherical_cos, cartesian_to_spherical_cos_j
@ 
<<Implementation of [[coordinates]] procedures>>=
pure subroutine cartesian_to_spherical_cos_2 (x, r, phi, cos_theta, jacobian)
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default), intent(out), optional :: r, phi
  real(kind=default), dimension(:), intent(out), optional :: cos_theta
  real(kind=default), intent(out), optional :: jacobian
  real(kind=default) :: local_r
  real(kind=default), dimension(size(x)-2) :: local_cos_theta
  real(kind=default), dimension(size(x)-1) :: product_sin_theta
  integer :: n, i
  n = size (x)
  local_r = sqrt (dot_product (x, x))
  if (local_r == 0) then
    if (present (r)) then
      r = 0
    end if 
    if (present (phi)) then
      phi = 0
    end if
    if (present (cos_theta)) then
      cos_theta = 0
    end if
    if (present (jacobian)) then
      jacobian = 1
    end if
  else     	
    product_sin_theta(n-1) = 1
    do i = n, 3, -1
       if (product_sin_theta(i-1) == 0) then
         local_cos_theta(i-2) = 0
       else	
         local_cos_theta(i-2) = x(i) / product_sin_theta(i-1) / local_r
       end if
       product_sin_theta(i-2) = &
            product_sin_theta(i-1) * sqrt (1 - local_cos_theta(i-2)**2)
    end do
    if (present (r)) then
       r = local_r
    end if
    if (present (phi)) then
       !  Set phi = 0 for vanishing vector
       if (x(1) == 0 .and. x(2)==0) then
    	phi = 0
       else	
          phi = atan2 (x(1), x(2))
       end if 
    end if
    if (present (cos_theta)) then
       cos_theta = local_cos_theta
    end if
    if (present (jacobian)) then
       jacobian = local_r**(1-n) / product (product_sin_theta(2:))
    end if
  end if
end subroutine cartesian_to_spherical_cos_2
@ %def cartesian_to_spherical_cos_2
@ 
<<Implementation of [[coordinates]] procedures>>=
pure subroutine cartesian_to_spherical_cos (x, r, phi, cos_theta)
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default), intent(out) :: r, phi
  real(kind=default), dimension(:), intent(out), optional :: cos_theta
  call cartesian_to_spherical_cos_2 (x, r, phi, cos_theta)
end subroutine cartesian_to_spherical_cos
@ %def cartesian_to_spherical_cos
@ 
<<Implementation of [[coordinates]] procedures>>=
pure function cartesian_to_spherical_cos_j (x) result (jacobian)
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default) :: jacobian
  call cartesian_to_spherical_cos_2 (x, jacobian = jacobian)
end function cartesian_to_spherical_cos_j
@ %def cartesian_to_spherical_cos_j
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Surface of a Sphere}
<<Declaration of [[coordinates]] procedures>>=
public :: surface
@
\begin{equation}
  \int\mathrm{d}\Omega_n = \frac{2\pi^{n/2}}{\Gamma(n/2)} = S_n
\end{equation}
<<Implementation of [[coordinates]] procedures>>=
pure function surface (n) result (vol)
  integer, intent(in) :: n
  real(kind=default) :: vol
  real(kind=default) :: n_by_2
  n_by_2 = 0.5_default * n 
  vol = 2 * PI**n_by_2 / gamma (n_by_2)
end function surface
@ %def surface
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
