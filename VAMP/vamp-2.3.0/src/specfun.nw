% -*- ess-noweb-default-code-mode: f90-mode; noweb-default-code-mode: f90-mode; -*- 
% VAMP specfun code as NOWEB source
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\RCSId$Id: specfun.nw 314 2010-04-17 20:32:33Z ohl $
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Special Functions}
<<[[specfun.f90]]>>=
! specfun.f90 --
<<Copyleft notice>>
module specfun
  use kinds
! use constants
  implicit none
  private
  <<Declaration of [[specfun]] procedures>>
  character(len=*), public, parameter :: SPECFUN_RCS_ID = &
       "$Id: specfun.nw 314 2010-04-17 20:32:33Z ohl $"
  !WK:
  real(kind=default), public, parameter :: &
       PI = 3.1415926535897932384626433832795028841972_default
contains
  <<Implementation of [[specfun]] procedures>>
end module specfun
@ %def specfun
@ The algorithm is stolen from the \texttt{FORTRAN} version in
routine C303 of the CERN library~\cite{Luk75}. It has an accuracy
which is approximately one digit less than machine precision.
<<Declaration of [[specfun]] procedures>>=
public :: gamma
@ The so-called reflection formula is used for negative arguments:
\begin{equation}
  \Gamma(x)\Gamma(1-x) = \frac{\pi}{\sin\pi x}
\end{equation}
Here's the identity transformation that pulls the argument of~$\Gamma$
into~$[3,4]$:
\begin{equation}
  \Gamma(u) =
    \begin{cases}
      (u-1)\Gamma(u-1)       & \text{ for } u > 4 \\
      \frac{1}{u}\Gamma(u+1) & \text{ for } u < 3
    \end{cases}
\end{equation}
@
<<Pull $u$ into the intervall $[3,4]$>>=
f = 1
if (u < 3) then
   do i = 1, int (4 - u)
      f = f / u
      u = u + 1
   end do
else
   do i = 1, int (u - 3)
      u = u - 1
      f = f * u
   end do
end if
@ A Chebyshev approximation for~$\Gamma(x)$ is used after
mapping ~$x\in[3,4]$ linearly to~$h\in[-1,1]$.
The series is evaluted by Clenshaw's recurrence formula:
\begin{equation}
\label{eq:Clenshaw}
  \begin{split}
     d_m & = d_{m+1} = 0 \\
     d_j & = 2xd_{j+1} - d_{j+2} + c_j \text{ for } 0 < j < m-1 \\
     f(x) = d_0 & = xd_1 - d_2 + \frac{1}{2}c_0
  \end{split}
\end{equation}
@
<<Clenshaw's recurrence formula>>=
alpha = 2*g
b1 = 0
b2 = 0
do i = 15, 0, -1
   b0 = c(i) + alpha * b1 - b2
   b2 = b1
   b1 = b0
end do
g = f * (b0 - g * b2)
@ Note that we're assuming that [[c(0)]] is in fact~$c_0/2$.  This is
for compatibility with the CERN library routines.
<<Implementation of [[specfun]] procedures>>=
pure function gamma (x) result (g)
  real(kind=default), intent(in) :: x
  real(kind=default) :: g
  integer :: i
  real(kind=default) :: u, f, alpha, b0, b1, b2
  real(kind=default), dimension(0:15), parameter :: &
       c = <<$c_0/2,c_1,c_2,\ldots,c_{15}$ for $\Gamma(x)$>>
  u = x
  if (u <= 0.0) then
     if (u == int (u)) then
        g = huge (g)
        return
     else
        u = 1 - u
     end if
  endif
  <<Pull $u$ into the intervall $[3,4]$>>
  g = 2*u - 7
  <<Clenshaw's recurrence formula>>
  if (x < 0) then
     g = PI / (sin (PI * x) * g)
  end if
end function gamma
@ %def gamma
@
<<$c_0/2,c_1,c_2,\ldots,c_{15}$ for $\Gamma(x)$>>=
(/ 3.65738772508338244_default, &
   1.95754345666126827_default, &
   0.33829711382616039_default, &
   0.04208951276557549_default, &
   0.00428765048212909_default, &
   0.00036521216929462_default, &
   0.00002740064222642_default, &
   0.00000181240233365_default, &
   0.00000010965775866_default, &
   0.00000000598718405_default, &
   0.00000000030769081_default, &
   0.00000000001431793_default, &
   0.00000000000065109_default, &
   0.00000000000002596_default, &
   0.00000000000000111_default, &
   0.00000000000000004_default /)

@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Test}
<<[[stest.f90]]>>=
! stest.f90 --
<<Copyleft notice>>
module stest_functions
  use kinds
  use constants
  use specfun
  private
  <<Declaration of [[stest_functions]] procedures>>
contains
  <<Implementation of [[stest_functions]] procedures>>
end module stest_functions
@ %def stest_functions
@
<<Declaration of [[stest_functions]] procedures>>=
public :: gauss_multiplication
@ Gauss' multiplication fomula can serve as a non-trivial test
\begin{equation}
  \Gamma(nx) = (2\pi)^{(1-n)/2} n^{nx-1/2} \prod_{k=0}^{n-1}\Gamma(x+k/n)
\end{equation}
<<Implementation of [[stest_functions]] procedures>>=
pure function gauss_multiplication (x, n) result (delta)
  real(kind=default), intent(in) :: x
  integer, intent(in) :: n
  real(kind=default) :: delta
  real(kind=default) :: gxn
  integer :: k
  gxn = (2*PI)**(0.5_double*(1-n)) * n**(n*x-0.5_double)
  do k = 0, n - 1
     gxn = gxn * gamma (x + real (k, kind=default) / n)
  end do
  delta = abs ((gamma (n*x) - gxn) / gamma (n*x))
end function gauss_multiplication
@ %def gauss_multiplication
@ 
<<[[stest.f90]]>>=
program stest
  use kinds
  use specfun
  use stest_functions !NODEP!
  implicit none
  integer :: i, steps
  real(kind=default) :: x, g, xmin, xmax
  xmin = -4.5
  xmax =  4.5
  steps = 100 ! 9
  do i = 0, steps
     x = xmin + ((xmax - xmin) / real (steps)) * i
     print "(f6.3,4(1x,e9.2))", x, &
          gauss_multiplication (x, 2), &
          gauss_multiplication (x, 3), &
          gauss_multiplication (x, 4), &
          gauss_multiplication (x, 5)
  end do
end program stest
@ %def stest

@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
