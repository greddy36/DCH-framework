% -*- ess-noweb-default-code-mode: f90-mode; noweb-default-code-mode: f90-mode; -*- 
% VAMP histograms code as NOWEB source
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\RCSId$Id: histograms.nw 314 2010-04-17 20:32:33Z ohl $
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Histogramming}
\begin{dubious}
   Merged WK's improvements for WHIZARD.  TODO \emph{after} merging:
   \begin{enumerate}
     \item [[bins3]] is a bad undescriptive name
     \item [[bins3]] should be added to [[histogram2]]
     \item [[write_histogram2_unit]] for symmetry.
   \end{enumerate}
\end{dubious}
\begin{dubious}
   There's almost no sanity checking.  If you call one of these
   functions on a histogram that has not been initialized, you loose.
   --- \emph{Big time}.
\end{dubious}
<<[[histograms.f90]]>>=
! histograms.f90 --
<<Copyleft notice>>
module histograms
  use kinds
  use utils, only: find_free_unit
  implicit none
  private
  <<Declaration of [[histograms]] procedures>>
  <<Interfaces of [[histograms]] procedures>>
  <<Variables in [[histograms]]>>
  <<Declaration of [[histograms]] types>>
  character(len=*), public, parameter :: HISTOGRAMS_RCS_ID = &
       "$Id: histograms.nw 314 2010-04-17 20:32:33Z ohl $"
contains
  <<Implementation of [[histograms]] procedures>>
end module histograms
@ %def histograms
@
<<Declaration of [[histograms]] types>>=
type, public :: histogram
   private
   integer :: n_bins
   real(kind=default) :: x_min, x_max
   real(kind=default), dimension(:), pointer :: bins => null ()
   real(kind=default), dimension(:), pointer :: bins2 => null ()
   real(kind=default), dimension(:), pointer :: bins3 => null ()
end type histogram
@ %def histogram
@
<<Declaration of [[histograms]] types>>=
type, public :: histogram2
   private
   integer, dimension(2) :: n_bins
   real(kind=default), dimension(2) :: x_min, x_max
   real(kind=default), dimension(:,:), pointer :: bins => null ()
   real(kind=default), dimension(:,:), pointer :: bins2 => null ()
end type histogram2
@ %def histogram2
@
<<Declaration of [[histograms]] procedures>>=
public :: create_histogram
public :: fill_histogram
public :: delete_histogram
public :: write_histogram
@ 
<<Interfaces of [[histograms]] procedures>>=
interface create_histogram
   module procedure create_histogram1, create_histogram2
end interface
interface fill_histogram
   module procedure fill_histogram1, fill_histogram2s, fill_histogram2v
end interface
interface delete_histogram
   module procedure delete_histogram1, delete_histogram2
end interface
interface write_histogram
   module procedure write_histogram1, write_histogram2
   module procedure write_histogram1_unit
end interface
@ %def create_histogram
@ %def fill_histogram
@ %def delete_histogram
@ %def write_histogram
@
<<Declaration of [[histograms]] procedures>>=
private :: create_histogram1, create_histogram2
private :: fill_histogram1, fill_histogram2s, fill_histogram2v
private :: delete_histogram1, delete_histogram2
private :: write_histogram1, write_histogram2
@
<<Variables in [[histograms]]>>=
integer, parameter, private :: N_BINS_DEFAULT = 10
@
<<Implementation of [[histograms]] procedures>>=
elemental subroutine create_histogram1 (h, x_min, x_max, nb)
  type(histogram), intent(out) :: h
  real(kind=default), intent(in) :: x_min, x_max
  integer, intent(in), optional :: nb
  if (present (nb)) then
     h%n_bins = nb
  else
     h%n_bins = N_BINS_DEFAULT
  end if
  h%x_min = x_min
  h%x_max = x_max
  allocate (h%bins(0:h%n_bins+1), h%bins2(0:h%n_bins+1))
  h%bins = 0
  h%bins2 = 0
  allocate (h%bins3(0:h%n_bins+1))
  h%bins3 = 0
end subroutine create_histogram1
@ %def create_histogram1
@
<<Implementation of [[histograms]] procedures>>=
pure subroutine create_histogram2 (h, x_min, x_max, nb)
  type(histogram2), intent(out) :: h
  real(kind=default), dimension(:), intent(in) :: x_min, x_max
  integer, intent(in), dimension(:), optional :: nb
  if (present (nb)) then
     h%n_bins = nb
  else
     h%n_bins = N_BINS_DEFAULT
  end if
  h%x_min = x_min
  h%x_max = x_max
  allocate (h%bins(0:h%n_bins(1)+1,0:h%n_bins(1)+1), &
	    h%bins2(0:h%n_bins(2)+1,0:h%n_bins(2)+1))
  h%bins = 0
  h%bins2 = 0
end subroutine create_histogram2
@ %def create_histogram2
@
<<Implementation of [[histograms]] procedures>>=
elemental subroutine fill_histogram1 (h, x, weight, excess)
  type(histogram), intent(inout) :: h
  real(kind=default), intent(in) :: x
  real(kind=default), intent(in), optional :: weight
  real(kind=default), intent(in), optional :: excess
  integer :: i
  if (x < h%x_min) then
     i = 0
  else if (x > h%x_max) then
     i = h%n_bins + 1
  else
     i = 1 + h%n_bins * (x - h%x_min) / (h%x_max - h%x_min)
!WK! i = min (max (i, 0), h%n_bins + 1)
  end if
  if (present (weight)) then
     h%bins(i) = h%bins(i) + weight
     h%bins2(i) = h%bins2(i) + weight*weight
  else
     h%bins(i) = h%bins(i) + 1
     h%bins2(i) = h%bins2(i) + 1
  end if
  if (present (excess)) h%bins3(i) = h%bins3(i) + excess
end subroutine fill_histogram1
@ %def fill_histogram1
@
<<Implementation of [[histograms]] procedures>>=
elemental subroutine fill_histogram2s (h, x1, x2, weight)
  type(histogram2), intent(inout) :: h
  real(kind=default), intent(in) :: x1, x2
  real(kind=default), intent(in), optional :: weight
  call fill_histogram2v (h, (/ x1, x2 /), weight)
end subroutine fill_histogram2s
@ %def fill_histogram2s
@
<<Implementation of [[histograms]] procedures>>=
pure subroutine fill_histogram2v (h, x, weight)
  type(histogram2), intent(inout) :: h
  real(kind=default), dimension(:), intent(in) :: x
  real(kind=default), intent(in), optional :: weight
  integer, dimension(2) :: i
  i = 1 + h%n_bins * (x - h%x_min) / (h%x_max - h%x_min)
  i = min (max (i, 0), h%n_bins + 1)
  if (present (weight)) then
     h%bins(i(1),i(2)) = h%bins(i(1),i(2)) + weight
     h%bins2(i(1),i(2)) = h%bins2(i(1),i(2)) + weight*weight
  else
     h%bins(i(1),i(2)) = h%bins(i(1),i(2)) + 1
     h%bins2(i(1),i(2)) = h%bins2(i(1),i(2)) + 1
  end if
end subroutine fill_histogram2v
@ %def fill_histogram2v
@
<<Implementation of [[histograms]] procedures>>=
elemental subroutine delete_histogram1 (h)
  type(histogram), intent(inout) :: h
  deallocate (h%bins, h%bins2)
  deallocate (h%bins3)
end subroutine delete_histogram1
@ %def delete_histogram1
@
<<Implementation of [[histograms]] procedures>>=
elemental subroutine delete_histogram2 (h)
  type(histogram2), intent(inout) :: h
  deallocate (h%bins, h%bins2)
end subroutine delete_histogram2
@ %def delete_histogram2
@
<<Implementation of [[histograms]] procedures>>=
subroutine write_histogram1 (h, name, over)
  type(histogram), intent(in) :: h
  character(len=*), intent(in), optional :: name
  logical, intent(in), optional :: over
  integer :: i, iounit
  if (present (name)) then
     call find_free_unit (iounit)
     if (iounit > 0) then
        open (unit = iounit, action = "write", status = "replace", &
              file = name)
        if (present (over)) then
           if (over) then
              write (unit = iounit, fmt = *) &
                "underflow", h%bins(0), sqrt (h%bins2(0))
           end if
        end if
        do i = 1, h%n_bins
           write (unit = iounit, fmt = *) &
                midpoint (h, i), h%bins(i), sqrt (h%bins2(i))
        end do
        if (present (over)) then
           if (over) then
              write (unit = iounit, fmt = *) &
                "overflow", h%bins(h%n_bins+1), &
                sqrt (h%bins2(h%n_bins+1))
           end if
        end if
        close (unit = iounit)
     else
        print *, "write_histogram: Can't find a free unit!"
     end if
  else
     if (present (over)) then
        if (over) then
           print *, "underflow", h%bins(0), sqrt (h%bins2(0))
        end if
     end if
     do i = 1, h%n_bins
        print *, midpoint (h, i), h%bins(i), sqrt (h%bins2(i))
     end do
     if (present (over)) then
        if (over) then
           print *, "overflow", h%bins(h%n_bins+1), &
                    sqrt (h%bins2(h%n_bins+1))
        end if
     end if
  end if
end subroutine write_histogram1
@ %def write_histogram1
@
<<Declaration of [[histograms]] procedures>>=
!WK! public :: write_histogram1_unit
@
\begin{dubious}
  I don't like the [[format]] statement with the line number.  Use a
  character constant instead (after we have merged with WHIZARD's branch).
\end{dubious}
<<Implementation of [[histograms]] procedures>>=
subroutine write_histogram1_unit (h, iounit, over, show_excess)
  type(histogram), intent(in) :: h
  integer, intent(in) :: iounit
  logical, intent(in), optional :: over, show_excess
  integer :: i
  logical :: show_exc
  show_exc = .false.; if (present(show_excess)) show_exc = show_excess
  if (present (over)) then
     if (over) then
        if (show_exc) then
           write (unit = iounit, fmt = 1) &
                "underflow", h%bins(0), sqrt (h%bins2(0)), h%bins3(0)
        else
           write (unit = iounit, fmt = 1) &
                "underflow", h%bins(0), sqrt (h%bins2(0))
        end if
     end if
  end if
  do i = 1, h%n_bins
     if (show_exc) then
        write (unit = iounit, fmt = 1) &
             midpoint (h, i), h%bins(i), sqrt (h%bins2(i)), h%bins3(i)
     else
        write (unit = iounit, fmt = 1) &
             midpoint (h, i), h%bins(i), sqrt (h%bins2(i))
     end if
  end do
  if (present (over)) then
     if (over) then
        if (show_exc) then
           write (unit = iounit, fmt = 1) &
                "overflow", h%bins(h%n_bins+1), &
                sqrt (h%bins2(h%n_bins+1)), &
                h%bins3(h%n_bins+1)
        else
           write (unit = iounit, fmt = 1) &
                "overflow", h%bins(h%n_bins+1), &
                sqrt (h%bins2(h%n_bins+1))
        end if
     end if
  end if
1 format (1x,4(G16.9,2x))
end subroutine write_histogram1_unit
@ %def write_histogram1_unit
@
<<Declaration of [[histograms]] procedures>>=
private :: midpoint
@ 
<<Interfaces of [[histograms]] procedures>>=
interface midpoint
   module procedure midpoint1, midpoint2
end interface
@ %def midpoint
@
<<Declaration of [[histograms]] procedures>>=
private :: midpoint1, midpoint2
@
<<Implementation of [[histograms]] procedures>>=
elemental function midpoint1 (h, bin) result (x)
  type(histogram), intent(in) :: h
  integer, intent(in) :: bin
  real(kind=default) :: x
  x = h%x_min + (h%x_max - h%x_min) * (bin - 0.5) / h%n_bins
end function midpoint1
@ %def midpoint1
@
<<Implementation of [[histograms]] procedures>>=
elemental function midpoint2 (h, bin, d) result (x)
  type(histogram2), intent(in) :: h
  integer, intent(in) :: bin, d
  real(kind=default) :: x
  x = h%x_min(d) + (h%x_max(d) - h%x_min(d)) * (bin - 0.5) / h%n_bins(d)
end function midpoint2
@ %def midpoint2
@
<<Implementation of [[histograms]] procedures>>=
subroutine write_histogram2 (h, name, over)
  type(histogram2), intent(in) :: h
  character(len=*), intent(in), optional :: name
  logical, intent(in), optional :: over
  integer :: i1, i2, iounit
  if (present (name)) then
     call find_free_unit (iounit)
     if (iounit > 0) then
        open (unit = iounit, action = "write", status = "replace", &
              file = name)
        if (present (over)) then
           if (over) then
              write (unit = iounit, fmt = *) &
                   "double underflow", h%bins(0,0), sqrt (h%bins2(0,0))
              do i2 = 1, h%n_bins(2)
                 write (unit = iounit, fmt = *) &
                      "x1 underflow", midpoint (h, i2, 2), &
                      h%bins(0,i2), sqrt (h%bins2(0,i2))
              end do
              do i1 = 1, h%n_bins(1)
                 write (unit = iounit, fmt = *) &
                      "x2 underflow", midpoint (h, i1, 1), &
                      h%bins(i1,0), sqrt (h%bins2(i1,0))
              end do
           end if
        end if
        do i1 = 1, h%n_bins(1)
           do i2 = 1, h%n_bins(2)
              write (unit = iounit, fmt = *) &
                   midpoint (h, i1, 1), midpoint (h, i2, 2), &
                   h%bins(i1,i2), sqrt (h%bins2(i1,i2))
           end do
        end do
        if (present (over)) then
           if (over) then
              do i2 = 1, h%n_bins(2)
                 write (unit = iounit, fmt = *) &
                      "x1 overflow", midpoint (h, i2, 2), &
                      h%bins(h%n_bins(1)+1,i2), &
                      sqrt (h%bins2(h%n_bins(1)+1,i2))
              end do
              do i1 = 1, h%n_bins(1)
                 write (unit = iounit, fmt = *) &
                      "x2 overflow", midpoint (h, i1, 1), &
                      h%bins(i1,h%n_bins(2)+1), &
                      sqrt (h%bins2(i1,h%n_bins(2)+1))
              end do
              write (unit = iounit, fmt = *) "double overflow", &
                   h%bins(h%n_bins(1)+1,h%n_bins(2)+1), &
                   sqrt (h%bins2(h%n_bins(1)+1,h%n_bins(2)+1))
           end if
        end if
        close (unit = iounit)
     else
        print *, "write_histogram: Can't find a free unit!"
     end if
  else
     if (present (over)) then
        if (over) then
           print *, "double underflow", h%bins(0,0), sqrt (h%bins2(0,0))
           do i2 = 1, h%n_bins(2)
              print *, "x1 underflow", midpoint (h, i2, 2), &
                   h%bins(0,i2), sqrt (h%bins2(0,i2))
           end do
           do i1 = 1, h%n_bins(1)
              print *, "x2 underflow", midpoint (h, i1, 1), &
                   h%bins(i1,0), sqrt (h%bins2(i1,0))
           end do
        end if
     end if
     do i1 = 1, h%n_bins(1)
        do i2 = 1, h%n_bins(2)
           print *, midpoint (h, i1, 1), midpoint (h, i2, 2), &
                h%bins(i1,i2), sqrt (h%bins2(i1,i2))
        end do
     end do
     if (present (over)) then
        if (over) then
           do i2 = 1, h%n_bins(2)
              print *, "x1 overflow", midpoint (h, i2, 2), &
                   h%bins(h%n_bins(1)+1,i2), &
                   sqrt (h%bins2(h%n_bins(1)+1,i2))
           end do
           do i1 = 1, h%n_bins(1)
              print *, "x2 overflow", midpoint (h, i1, 1), &
                   h%bins(i1,h%n_bins(2)+1), &
                   sqrt (h%bins2(i1,h%n_bins(2)+1))
           end do
           print *, "double overflow", &
                h%bins(h%n_bins(1)+1,h%n_bins(2)+1), &
                sqrt (h%bins2(h%n_bins(1)+1,h%n_bins(2)+1))
        end if
     end if
  end if
end subroutine write_histogram2
@ %def write_histogram2
@ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
